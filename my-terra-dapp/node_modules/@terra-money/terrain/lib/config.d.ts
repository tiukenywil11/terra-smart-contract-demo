import { LCDClientConfig, RawKey } from "@terra-money/terra.js";
declare type Fee = {
    gasLimit: number;
    amount: {
        [coin: string]: number;
    };
};
export declare type ContractConfig = {
    store: {
        fee: Fee;
    };
    instantiation: {
        fee: Fee;
        instantiateMsg: Record<string, any>;
    };
};
declare type Config = {
    [contract: string]: ContractConfig;
};
declare type GlobalConfig = {
    _base: ContractConfig;
    [contract: string]: ContractConfig;
};
export declare type ContractRef = {
    codeId: number;
    contractAddresses: {
        [key: string]: string;
    };
};
export declare type Refs = {
    [network: string]: {
        [contract: string]: ContractRef;
    };
};
export declare const connection: (networks: {
    [network: string]: {
        _connection: LCDClientConfig;
    };
}) => (network: string) => LCDClientConfig;
export declare const loadConnections: (path?: string) => (network: string) => LCDClientConfig;
export declare const config: (allConfig: {
    [network: string]: Partial<Config>;
    _global: GlobalConfig;
}) => (network: string, contract: string) => ContractConfig;
export declare const saveConfig: (valuePath: string[], value: string | Record<string, any>, path: string) => void;
export declare const loadConfig: (path?: string) => (network: string, contract: string) => ContractConfig;
export declare const loadKeys: (path?: string) => {
    [keyName: string]: RawKey;
};
export declare const setCodeId: (network: string, contract: string, codeId: number) => <T>(obj: T) => T;
export declare const setContractAddress: (network: string, contract: string, instanceId: string, contractAddress: string) => <T>(obj: T) => T;
export declare const loadRefs: (path?: string) => Refs;
export declare const saveRefs: (refs: Refs, path: string) => void;
export {};
