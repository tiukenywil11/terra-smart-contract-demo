"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveRefs = exports.loadRefs = exports.setContractAddress = exports.setCodeId = exports.loadKeys = exports.loadConfig = exports.saveConfig = exports.config = exports.loadConnections = exports.connection = void 0;
const R = require("ramda");
const fs = require("fs-extra");
const terra_js_1 = require("@terra-money/terra.js");
const cli_ux_1 = require("cli-ux");
exports.connection = (networks) => (network) => networks[network]._connection ||
    cli_ux_1.cli.error(`network '${network}' not found in config`);
exports.loadConnections = (path = `${__dirname}/template/config.terrain.json`) => exports.connection(fs.readJSONSync(path));
exports.config = (allConfig) => (network, contract) => {
    const globalBaseConfig = (allConfig._global && allConfig._global._base) || {};
    const globalContractConfig = (allConfig._global && allConfig._global[contract]) || {};
    const baseConfig = (allConfig[network] && allConfig[network]._base) || {};
    const contractConfig = (allConfig[network] && allConfig[network][contract]) || {};
    return [
        allConfig._global._base,
        globalBaseConfig,
        globalContractConfig,
        baseConfig,
        contractConfig,
    ].reduce(R.mergeDeepRight);
};
exports.saveConfig = (valuePath, value, path) => {
    const conf = fs.readJSONSync(path);
    const updated = R.set(R.lensPath(valuePath), value, conf);
    fs.writeJSONSync(path, updated, { spaces: 2 });
};
exports.loadConfig = (path = `${__dirname}/template/config.terrain.json`) => exports.config(fs.readJSONSync(path));
exports.loadKeys = (path = `${__dirname}/template/keys.terrain.js`) => {
    const keys = require(path);
    return R.map((w) => w.privateKey
        ? new terra_js_1.RawKey(Buffer.from(w.privateKey, "base64"))
        : w.mnemonic
            ? new terra_js_1.MnemonicKey(w)
            : cli_ux_1.cli.error("Error: Key must be defined with either `privateKey` or `mnemonic`"), keys);
};
exports.setCodeId = (network, contract, codeId) => R.set(R.lensPath([network, contract, "codeId"]), codeId);
exports.setContractAddress = (network, contract, instanceId, contractAddress) => R.set(R.lensPath([network, contract, "contractAddresses", instanceId]), contractAddress);
exports.loadRefs = (path = `${__dirname}/template/refs.terrain.json`) => fs.readJSONSync(path);
exports.saveRefs = (refs, path) => {
    fs.writeJSONSync(path, refs, { spaces: 2 });
};
