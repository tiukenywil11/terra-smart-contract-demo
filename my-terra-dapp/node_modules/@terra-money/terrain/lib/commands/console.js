"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const env_1 = require("../lib/env");
const path = require("path");
const repl = require("repl");
const terrajs = require("@terra-money/terra.js");
class Console extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(Console);
        const fromCwd = (p) => path.join(process.cwd(), p);
        const env = env_1.getEnv(fromCwd(flags["config-path"]), fromCwd(flags["keys-path"]), fromCwd(flags["refs-path"]), flags.network);
        const lib = require(path.join(process.cwd(), "lib"));
        // for repl server
        const { config, refs, wallets, client } = env;
        const r = repl.start({ prompt: "terrain > ", useColors: true });
        const def = (name, value) => Object.defineProperty(r.context, name, {
            configurable: false,
            enumerable: true,
            value,
        });
        def("config", config);
        def("refs", refs);
        def("wallets", wallets);
        def("client", client);
        def("terrajs", terrajs);
        def("lib", lib(env));
    }
}
exports.default = Console;
Console.description = "Start a repl console that provides context and convinient utilities to interact with the blockchain and your contracts.";
Console.flags = {
    network: command_1.flags.string({ default: "localterra" }),
    "config-path": command_1.flags.string({ default: "config.terrain.json" }),
    "refs-path": command_1.flags.string({ default: "refs.terrain.json" }),
    "keys-path": command_1.flags.string({ default: "keys.terrain.js" }),
};
Console.args = [];
