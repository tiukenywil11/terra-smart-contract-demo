import { PublicKey } from './PublicKey';
import { Coins } from './Coins';
import { AccAddress } from './bech32';
import { Any } from '@terra-money/terra.proto/src/google/protobuf/any_pb';
export declare namespace ProtoTx {
    interface Proto {
        body: TxBody.Proto;
        auth_info: AuthInfo.Proto;
        signatures: string[];
    }
}
export declare namespace TxBody {
    interface Proto {
        messages: Any[];
        memo: string;
        timeout_height: string;
    }
}
export declare namespace AuthInfo {
    interface Proto {
        signer_infos: SignerInfo.Proto[];
        fee: Fee.Proto;
    }
}
export declare class SignerInfo {
    public_key: PublicKey;
    sequence: string;
    mode_info: ModeInfo;
    constructor(public_key: PublicKey, sequence: string, mode_info: ModeInfo);
    static fromProto(proto: SignerInfo.Proto): SignerInfo;
    toProto(): SignerInfo.Proto;
}
export declare namespace SignerInfo {
    interface Proto {
        public_key: Any;
        sequence: string;
        mode_info: ModeInfo.Proto;
    }
}
export declare class ModeInfo {
    mode_info: ModeInfo.Proto;
    constructor(mode_info: ModeInfo.Proto);
    static fromProto(proto: ModeInfo.Proto): ModeInfo;
    toProto(): ModeInfo.Proto;
}
export declare namespace ModeInfo {
    type Proto = SingleMode.Proto | MultiMode.Proto;
}
export declare namespace SingleMode {
    interface Proto {
        single: {
            mode: string;
        };
    }
}
export declare namespace MultiMode {
    interface Proto {
        multi: {
            bitarray: {
                extra_bits_stored: string;
                elems: string;
            };
            mode_infos: SingleMode.Proto[];
        };
    }
}
export declare class Fee {
    readonly gas_limit: string;
    payer: AccAddress;
    granter: AccAddress;
    /** Fee amount to be paid */
    readonly amount: Coins;
    /**
     * Creates a new StdFee object.
     * @param gas gas limit
     * @param amount amount to be paid to validator
     */
    constructor(gas_limit: string, amount: Coins.Input, payer: AccAddress, granter: AccAddress);
    static fromProto(proto: Fee.Proto): Fee;
    toProto(): Fee.Proto;
}
export declare namespace Fee {
    interface Proto {
        amount: Coins.Data;
        gas_limit: string;
        payer: AccAddress;
        granter: AccAddress;
    }
}
