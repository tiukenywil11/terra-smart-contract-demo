import { Denom } from '../Denom';
import { ParamChange } from '../params/ParamChange';
import { Dec } from '../numeric';
export declare type OracleWhitelist = {
    name: Denom;
    tobin_tax: Dec;
}[];
export declare namespace OracleWhitelist {
    type Data = {
        name: Denom;
        tobin_tax: string;
    }[];
}
declare type VotePeriod = ParamChange.Type<'oracle', 'VotePeriod', number>;
declare type VoteThreshold = ParamChange.Type<'oracle', 'VoteThreshold', Dec>;
declare type RewardBand = ParamChange.Type<'oracle', 'RewardBand', Dec>;
declare type RewardDistributionWindow = ParamChange.Type<'oracle', 'RewardDistributionWindow', number>;
declare type Whitelist = ParamChange.Type<'oracle', 'Whitelist', OracleWhitelist>;
declare type SlashFraction = ParamChange.Type<'oracle', 'SlashFraction', Dec>;
declare type SlashWindow = ParamChange.Type<'oracle', 'SlashWindow', number>;
declare type MinValidPerWindow = ParamChange.Type<'oracle', 'MinValidPerWindow', Dec>;
export declare type OracleParamChange = VotePeriod | VoteThreshold | RewardBand | RewardDistributionWindow | Whitelist | SlashFraction | SlashWindow | MinValidPerWindow;
export declare namespace OracleParamChange {
    type Data = ParamChange.Data.Type<VotePeriod> | ParamChange.Data.Type<VoteThreshold> | ParamChange.Data.Type<RewardBand> | ParamChange.Data.Type<RewardDistributionWindow> | ParamChange.Data.Type<Whitelist> | ParamChange.Data.Type<SlashFraction> | ParamChange.Data.Type<SlashWindow> | ParamChange.Data.Type<MinValidPerWindow>;
}
export interface OracleParamChanges {
    oracle?: {
        VotePeriod?: number;
        VoteThreshold?: Dec;
        RewardBand?: Dec;
        RewardDistributionWindow?: number;
        Whitelist?: OracleWhitelist;
        SlashFraction?: Dec;
        SlashWindow?: number;
        MinValidPerWindow?: Dec;
    };
}
export declare namespace OracleParamChanges {
    const ConversionTable: {
        oracle: {
            VotePeriod: (((string: string, radix?: number | undefined) => number) | ((c: number) => string))[];
            VoteThreshold: (((c: import("decimal.js").default.Value) => Dec) | ((c: any) => string))[];
            RewardBand: (((c: import("decimal.js").default.Value) => Dec) | ((c: any) => string))[];
            RewardDistributionWindow: (((string: string, radix?: number | undefined) => number) | ((c: number) => string))[];
            Whitelist: (((c: OracleWhitelist.Data) => OracleWhitelist) | ((c: OracleWhitelist) => OracleWhitelist.Data))[];
            SlashFraction: (((c: import("decimal.js").default.Value) => Dec) | ((c: any) => string))[];
            SlashWindow: (((string: string, radix?: number | undefined) => number) | ((c: number) => string))[];
            MinValidPerWindow: (((c: import("decimal.js").default.Value) => Dec) | ((c: any) => string))[];
        };
    };
}
export {};
