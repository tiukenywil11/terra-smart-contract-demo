import { JSONSerializable } from '../../util/json';
import { Coins } from '../Coins';
import { Coin } from '../Coin';
import { AccAddress } from 'core/bech32';
export declare class AuthorizationGrant extends JSONSerializable<AuthorizationGrant.Data> {
    authorization: Authorization;
    expiration: Date;
    constructor(authorization: Authorization, expiration: Date);
    static fromData(data: AuthorizationGrant.Data): AuthorizationGrant;
    toData(): AuthorizationGrant.Data;
    static fromProto(data: AuthorizationGrant.Proto): AuthorizationGrant;
    toProto(): AuthorizationGrant.Proto;
}
export declare namespace AuthorizationGrant {
    interface Data {
        authorization: Authorization.Data;
        expiration: string;
    }
    interface Proto {
        authorization: Authorization.Proto;
        expiration: string;
    }
}
export declare type Authorization = SendAuthorization | GenericAuthorization | StakeAuthorization;
export declare namespace Authorization {
    type Data = SendAuthorization.Data | GenericAuthorization.Data;
    type Proto = SendAuthorization.Proto | GenericAuthorization.Proto | StakeAuthorization.Proto;
    function fromData(data: Authorization.Data): Authorization;
    function fromProto(proto: Authorization.Proto): Authorization;
}
export declare class SendAuthorization extends JSONSerializable<SendAuthorization.Data> {
    spend_limit: Coins;
    constructor(spend_limit: Coins.Input);
    static fromData(data: SendAuthorization.Data): SendAuthorization;
    toData(): SendAuthorization.Data;
    static fromProto(proto: SendAuthorization.Proto): SendAuthorization;
    toProto(): SendAuthorization.Proto;
}
export declare namespace SendAuthorization {
    interface Data {
        type: 'msgauth/SendAuthorization';
        value: {
            spend_limit: Coins.Data;
        };
    }
    interface Proto {
        '@type': '/cosmos.bank.v1beta1.SendAuthorization';
        spend_limit: Coins.Data;
    }
}
export declare class GenericAuthorization extends JSONSerializable<GenericAuthorization.Data> {
    msg: string;
    constructor(msg: string);
    static fromData(data: GenericAuthorization.Data): GenericAuthorization;
    toData(): GenericAuthorization.Data;
    static fromProto(data: GenericAuthorization.Proto): GenericAuthorization;
    toProto(): GenericAuthorization.Proto;
}
export declare namespace GenericAuthorization {
    interface Data {
        type: 'msgauth/GenericAuthorization';
        value: {
            msg: string;
        };
    }
    interface Proto {
        '@type': '/cosmos.authz.v1beta1.GenericAuthorization';
        msg: string;
    }
}
export declare enum STAKING_AUTHORIZATION_TYPES {
    AUTHORIZATION_TYPE_UNSPECIFIED = "AUTHORIZATION_TYPE_UNSPECIFIED",
    AUTHORIZATION_TYPE_DELEGATE = "AUTHORIZATION_TYPE_DELEGATE",
    AUTHORIZATION_TYPE_UNDELEGATE = "AUTHORIZATION_TYPE_UNDELEGATE",
    AUTHORIZATION_TYPE_REDELEGATE = "AUTHORIZATION_TYPE_REDELEGATE"
}
export declare class StakeAuthorization {
    authorization_type: STAKING_AUTHORIZATION_TYPES;
    max_tokens?: Coin | undefined;
    allow_list?: StakeAuthorizationValidators | undefined;
    deny_list?: StakeAuthorizationValidators | undefined;
    constructor(authorization_type: STAKING_AUTHORIZATION_TYPES, max_tokens?: Coin | undefined, allow_list?: StakeAuthorizationValidators | undefined, deny_list?: StakeAuthorizationValidators | undefined);
    static fromProto(proto: StakeAuthorization.Proto): StakeAuthorization;
    toProto(): StakeAuthorization.Proto;
}
export declare class StakeAuthorizationValidators {
    address: AccAddress[];
    constructor(address: AccAddress[]);
    static fromProto(proto: StakeAuthorizationValidators.Proto): StakeAuthorizationValidators;
    toProto(): StakeAuthorizationValidators.Proto;
}
export declare namespace StakeAuthorizationValidators {
    interface Proto {
        address: AccAddress[];
    }
}
export declare namespace StakeAuthorization {
    interface Proto {
        '@type': '/cosmos.staking.v1beta1.StakeAuthorization';
        max_tokens?: Coin.Data;
        allow_list?: StakeAuthorizationValidators.Proto;
        deny_list?: StakeAuthorizationValidators.Proto;
        authorization_type: STAKING_AUTHORIZATION_TYPES;
    }
}
