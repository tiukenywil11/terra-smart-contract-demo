"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fee = exports.ModeInfo = exports.SignerInfo = void 0;
var PublicKey_1 = require("./PublicKey");
var Coins_1 = require("./Coins");
var SignerInfo = /** @class */ (function () {
    function SignerInfo(public_key, sequence, mode_info) {
        this.public_key = public_key;
        this.sequence = sequence;
        this.mode_info = mode_info;
    }
    SignerInfo.fromProto = function (proto) {
        var public_key = proto.public_key, sequence = proto.sequence, mode_info = proto.mode_info;
        return new SignerInfo(PublicKey_1.PublicKey.fromProto(public_key), sequence, ModeInfo.fromProto(mode_info));
    };
    SignerInfo.prototype.toProto = function () {
        var _a = this, public_key = _a.public_key, sequence = _a.sequence, mode_info = _a.mode_info;
        return {
            public_key: public_key.packAny(),
            sequence: sequence,
            mode_info: mode_info.toProto(),
        };
    };
    return SignerInfo;
}());
exports.SignerInfo = SignerInfo;
var ModeInfo = /** @class */ (function () {
    function ModeInfo(mode_info) {
        this.mode_info = mode_info;
    }
    ModeInfo.fromProto = function (proto) {
        return new ModeInfo(proto);
    };
    ModeInfo.prototype.toProto = function () {
        return this.mode_info;
    };
    return ModeInfo;
}());
exports.ModeInfo = ModeInfo;
var Fee = /** @class */ (function () {
    /**
     * Creates a new StdFee object.
     * @param gas gas limit
     * @param amount amount to be paid to validator
     */
    function Fee(gas_limit, amount, payer, granter) {
        this.gas_limit = gas_limit;
        this.payer = payer;
        this.granter = granter;
        this.amount = new Coins_1.Coins(amount);
    }
    Fee.fromProto = function (proto) {
        var amount = proto.amount, gas_limit = proto.gas_limit, payer = proto.payer, granter = proto.granter;
        return new Fee(gas_limit, Coins_1.Coins.fromData(amount), payer, granter);
    };
    Fee.prototype.toProto = function () {
        var _a = this, amount = _a.amount, gas_limit = _a.gas_limit, payer = _a.payer, granter = _a.granter;
        return {
            gas_limit: gas_limit,
            amount: amount.toData(),
            payer: payer,
            granter: granter,
        };
    };
    return Fee;
}());
exports.Fee = Fee;
//# sourceMappingURL=ProtoTx.js.map